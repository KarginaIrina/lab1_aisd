#include <iostream>
#include <stdexcept>
#include <random>
#include <complex>


//класс матрицы
template <typename T>
class Matrix {
private:
	size_t rows_;
	size_t cols_;
	T* data_;


public:
	//конструктор с параметрами: размеры матрицы и значение для заполнения;
	Matrix() {

	}


	/*конструктор с параметрами, заполняющий матрицу случайными значениями. 
	Параметры: размеры матрицы, нижняя граница, верхняя граница;*/
	Matrix() {

	}



	//Деструктор
	~Matrix() {
		delete[] data_;
	}



	// оператор сравнения на равенство и неравенство
	

	//оператор () для чтения/записи элемента матрицы по указанным индексам; (один константный, другой неконстантный)




	//оператор сложения матриц



	//оператор вычитания матриц



	
	//оператор умножения матриц




	//оператор умножения матрицы на скаляр (обеспечить коммутативность)




	//оператор деления матрицы на скаляр




	//вычисление следа матрицы




	//Привести заданную квадратную матрицу A к нижнетреугольному виду 
	//(разложить на верхне- и нижнетреугольную матрицу, при произведении дающую исходную).


};



//перегрузка оператора вывода


// константы точности на любой вкус и цвет



int main() {
	try {
		//проверка всех операторов и методов





	}
	catch (const std::exception& ex) {
		std::cerr << "Oh, there is a mistake: " << ex.what() << "\n";
	}



	return 0;
}
